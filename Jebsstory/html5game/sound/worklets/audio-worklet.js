AudioWorkletProcessor.prototype._h2=function(){this._i2=true;this.port.onmessage=(_j2)=>{if(_j2.data==="kill")this._i2=false;};};class _k2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._h2();}process(_l2,_m2,parameters){const input=_l2[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _n2=input[c];for(let _o2=0;_o2<_n2.length;++_o2){const _p2=(bypass[_o2]!==undefined)?bypass[_o2]:bypass[0];
_m2[_p2][c][_o2]=_n2[_o2];}}return this._i2;}}class _q2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._h2();}process(_l2,_m2,parameters){const _r2=_l2[0];const _s2=_l2[1];const output=_m2[0];const gain=parameters.gain;for(let c=0;c<_s2.length;++c){const _n2=_s2[c];const _t2=output[c];for(let _o2=0;_o2<_n2.length;++_o2)_t2[_o2]=_n2[_o2];}for(let c=0;c<_r2.length;++c){const _n2=_r2[c];const _t2=output[c];
for(let _o2=0;_o2<_n2.length;++_o2){const _u2=(gain[_o2]!==undefined)?gain[_o2]:gain[0];_t2[_o2]+=_n2[_o2]*_u2;}}return this._i2;}}registerProcessor("audio-bus-input",_k2);registerProcessor("audio-bus-output",_q2);class _v2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100}
,{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _w2=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_x2){super();this._h2();const _y2=_x2.outputChannelCount[0];this._z2=new Float32Array(_y2);this._A2=new Uint32Array(_y2);}process(_l2,_m2,parameters){const input=_l2[0];const output=_m2[0];const bypass=parameters.bypass;const gain=parameters.gain;
const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _n2=input[c];const _t2=output[c];for(let _o2=0;_o2<_n2.length;++_o2){_t2[_o2]=_n2[_o2];if(this._A2[c]===0)this._z2[c]=_n2[_o2];const _B2=(factor[_o2]!==undefined)?factor[_o2]:factor[0];++this._A2[c];this._A2[c]%=_B2;const _p2=(bypass[_o2]!==undefined)?bypass[_o2]:bypass[0];if(_p2>0.0){continue;}let _C2=this._z2[c];const _u2=(gain[_o2]!==undefined)?gain[_o2]:gain[0];_C2*=_u2;_C2=Math.max(Math.min(_C2,
1.0),-1.0);const _D2=(resolution[_o2]!==undefined)?resolution[_o2]:resolution[0];const max=(_C2>0.0)?_v2._w2[_D2]-1:_v2._w2[_D2];_C2=Math.round(_C2*max)/max;const _E2=(mix[_o2]!==undefined)?mix[_o2]:mix[0];_t2[_o2]*=(1.0-_E2);_t2[_o2]+=(_C2*_E2);}}return this._i2;}}registerProcessor("bitcrusher-processor",_v2);class _F2{constructor(_G2=1e-3){this.setTime(_G2);}setTime(_G2){this._H2=Math.exp(-1/(_G2*sampleRate));}process(_I2,_J2){return _I2+this._H2*(_J2-_I2);}}class _K2{constructor(_L2,_M2){this._N2=new _F2(_L2);
this._O2=new _F2(_M2);this._P2=_L2;this._Q2=_M2;}_R2(_G2){if(_G2===this._P2)return;this._N2.setTime(_G2);this._P2=_G2;}_S2(_G2){if(_G2===this._Q2)return;this._O2.setTime(_G2);this._Q2=_G2;}process(_I2,_J2){if(_I2>_J2)return this._N2.process(_I2,_J2);else return this._O2.process(_I2,_J2);}}class _T2 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0}
,{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_U2){super();this._h2();const _N2=_T2.parameterDescriptors.find(_V2=>_V2.name==="attack");const _O2=_T2.parameterDescriptors.find(_V2=>_V2.name==="release");
this._W2=new _K2(_N2.defaultValue,_O2.defaultValue);this._X2=0;}process(_Y2,_Z2,__2){const input=_Y2[0];const output=_Z2[0];const bypass=__2.bypass;const ingain=__2.ingain;const outgain=__2.outgain;const threshold=__2.threshold;const ratio=__2.ratio;const attack=__2.attack;const release=__2.release;if(input.length===0)return this._i2;for(let _o2=0;_o2<input[0].length;++_o2){let frame=input.map(_03=>_03[_o2]);output.forEach((_03,_13)=>{_03[_o2]=frame[_13];});const _23=(ingain[_o2]!==undefined)?ingain[_o2]:ingain[0];
frame=frame.map(_33=>_33*=_23);const rect=frame.map(_33=>Math.abs(_33));const max=Math.max(...rect);const _43=_53(max);const _63=(threshold[_o2]!==undefined)?threshold[_o2]:threshold[0];const _73=_53(_63);const _83=Math.max(0,_43-_73);const _N2=(attack[_o2]!==undefined)?attack[_o2]:attack[0];const _O2=(release[_o2]!==undefined)?release[_o2]:release[0];this._W2._R2(_N2);this._W2._S2(_O2);this._X2=this._W2.process(_83,this._X2);const _p2=(bypass[_o2]!==undefined)?bypass[_o2]:bypass[0];if(_p2>0)continue;const _D2=(ratio[_o2]!==undefined)?ratio[_o2]:ratio[0];
const _93=(this._X2/_D2)-this._X2;const _u2=_a3(_93);frame=frame.map(_33=>_33*=_u2);const _b3=(outgain[_o2]!==undefined)?outgain[_o2]:outgain[0];frame=frame.map(_33=>_33*=_b3);output.forEach((_03,_13)=>{_03[_o2]=frame[_13];});}return this._i2;}}function _53(_c3){return 20*Math.log10(_c3);}function _a3(_c3){return Math.pow(10,_c3/20);}registerProcessor("compressor-processor",_T2);class _d3 extends AudioWorkletProcessor{static _e3=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_d3._e3},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_x2){super();this._h2();const _y2=_x2.outputChannelCount[0];const _f3=(_d3._e3*sampleRate)+1;this.buffer=new Array(_y2);this._g3=new Uint32Array(_y2);for(let c=0;c<_y2;++c)this.buffer[c]=new Float32Array(_f3);
}process(_l2,_m2,parameters){const input=_l2[0];const output=_m2[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _n2=input[c];const _t2=output[c];for(let _o2=0;_o2<_n2.length;++_o2){_t2[_o2]=_n2[_o2];const _63=(time[_o2]!==undefined)?time[_o2]:time[0];const _h3=this._i3(c,_63);const _B2=(feedback[_o2]!==undefined)?feedback[_o2]:feedback[0];const _j3=_n2[_o2]+(_h3*_B2);this.write(c,_j3);const _p2=(bypass[_o2]!==undefined)?bypass[_o2]:bypass[0];
if(_p2>0.0){continue;}const _E2=(mix[_o2]!==undefined)?mix[_o2]:mix[0];_t2[_o2]*=(1-_E2);_t2[_o2]+=(_h3*_E2);}}return this._i2;}_i3(_k3,_G2){const _l3=_G2*sampleRate;let _m3=(this._g3[_k3]-~~_l3);let _n3=(_m3-1);while(_m3<0)_m3+=this.buffer[_k3].length;while(_n3<0)_n3+=this.buffer[_k3].length;const frac=_l3-~~_l3;const _o3=this.buffer[_k3][_m3];const _p3=this.buffer[_k3][_n3];return _o3+(_p3-_o3)*frac;}write(_k3,_q3){++this._g3[_k3];this._g3[_k3]%=this.buffer[_k3].length;this.buffer[_k3][this._g3[_k3]]=_q3;
}}registerProcessor("delay-processor",_d3);class _r3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._h2();}process(_s3,_t3,_u3){const input=_s3[0];const _v3=_t3[0];const _w3=_t3[1];for(let c=0;c<input.length;++c){const _n2=input[c];const _x3=_v3[c];const _y3=_w3[c];for(let _o2=0;_o2<_n2.length;++_o2){_x3[_o2]=_n2[_o2];_y3[_o2]=_n2[_o2];}}return this._i2;}}class _z3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._h2();}process(_s3,_t3,_u3){const _r2=_s3[0];const _s2=_s3[1];const output=_t3[0];const bypass=_u3.bypass;for(let c=0;c<_s2.length;++c){const _A3=_r2[c];const _B3=_s2[c];const _t2=output[c];for(let _o2=0;_o2<_A3.length;++_o2){const _p2=(bypass[_o2]!==undefined)?bypass[_o2]:bypass[0];if(_p2>0){_t2[_o2]=_B3[_o2];}else {_t2[_o2]=_A3[_o2];}}}return this._i2;}}registerProcessor("eq-input",_r3);registerProcessor("eq-output",_z3);class _C3 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._h2();}process(_l2,_m2,parameters){const input=_l2[0];const output=_m2[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _n2=input[c];const _t2=output[c];for(let _o2=0;_o2<_n2.length;++_o2){_t2[_o2]=_n2[_o2];const _p2=(bypass[_o2]!==undefined)?bypass[_o2]:bypass[0];
if(_p2>0.0){continue;}const _u2=(gain[_o2]!==undefined)?gain[_o2]:gain[0];_t2[_o2]*=_u2;}}return this._i2;}}registerProcessor("gain-processor",_C3);class _D3 extends AudioWorkletProcessor{static get parameterDescriptors(){const _E3=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_E3),minValue:10.0,maxValue:_E3},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,
maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_x2){super();this._h2();const _y2=_x2.outputChannelCount[0];this._F3=0;this._G3=0;this._H3=0;this._I3=0;this._J3=0;this._K3=new Float32Array(_y2);this._L3=new Float32Array(_y2);this._M3=new Float32Array(_y2);this._N3=new Float32Array(_y2);this._O3=-1;this._P3=-1;this._Q3=-1;}process(_l2,_m2,parameters){const input=_l2[0];const output=_m2[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;
const gain=parameters.gain;const _R3=(freq.length===1&&q.length===1&&gain.length===1);if(_R3)this._S3(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _n2=input[c];const _t2=output[c];for(let _o2=0;_o2<_n2.length;++_o2){if(_R3===false){const _B2=(freq[_o2]!==undefined)?freq[_o2]:freq[0];const _T3=(q[_o2]!==undefined)?q[_o2]:q[0];const _u2=(gain[_o2]!==undefined)?gain[_o2]:gain[0];this._S3(_B2,_T3,_u2);}const _U3=this._H3*_n2[_o2]+this._I3*this._K3[c]+this._J3*this._L3[c]-this._F3*this._M3[c]-this._G3*this._N3[c];
this._L3[c]=this._K3[c];this._K3[c]=_n2[_o2];this._N3[c]=this._M3[c];this._M3[c]=_U3;const _p2=(bypass[_o2]!==undefined)?bypass[_o2]:bypass[0];_t2[_o2]=(_p2>0)?_n2[_o2]:_U3;}}return this._i2;}_S3(_V3,_W3,_X3){if(_V3===this._O3&&_W3===this._P3&&_X3===this._Q3)return;const _Y3=2*Math.PI*_V3/sampleRate;const _Z3=Math.cos(_Y3);const __3=Math.sqrt(_X3);const _04=__3+1;const _14=__3-1;const _24=_04*_Z3;const _34=_14*_Z3;const _44=_04-_34;const _54=_04+_34;const alpha=Math.sin(_Y3)/(2*_W3);const _64=(2*Math.sqrt(__3)*alpha);
const _74=_44+_64;const _F3=2*(_14-_24);const _G3=_44-_64;const _H3=__3*(_54+_64);const _I3=-2*__3*(_14+_24);const _J3=__3*(_54-_64);this._F3=_F3/_74;this._G3=_G3/_74;this._H3=_H3/_74;this._I3=_I3/_74;this._J3=_J3/_74;this._O3=_V3;this._P3=_W3;this._Q3=_X3;}}registerProcessor("hi-shelf-processor",_D3);class _84 extends AudioWorkletProcessor{static get parameterDescriptors(){const _94=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",
automationRate:"a-rate",defaultValue:Math.min(1500.0,_94),minValue:10.0,maxValue:_94},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_x2){super();this._h2();const _y2=_x2.outputChannelCount[0];this._F3=0;this._G3=0;this._H3=0;this._I3=0;this._J3=0;this._K3=new Float32Array(_y2);this._L3=new Float32Array(_y2);this._M3=new Float32Array(_y2);this._N3=new Float32Array(_y2);this._a4=-1;this._P3=-1;}process(_l2,_m2,parameters){const input=_l2[0];const output=_m2[0];
const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _R3=(cutoff.length===1&&q.length===1);if(_R3)this._S3(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _n2=input[c];const _t2=output[c];for(let _o2=0;_o2<_n2.length;++_o2){if(_R3===false){const c=(cutoff[_o2]!==undefined)?cutoff[_o2]:cutoff[0];const _T3=(q[_o2]!==undefined)?q[_o2]:q[0];this._S3(c,_T3);}const _U3=this._H3*_n2[_o2]+this._I3*this._K3[c]+this._J3*this._L3[c]-this._F3*this._M3[c]-this._G3*this._N3[c];this._L3[c]=this._K3[c];
this._K3[c]=_n2[_o2];this._N3[c]=this._M3[c];this._M3[c]=_U3;const _p2=(bypass[_o2]!==undefined)?bypass[_o2]:bypass[0];_t2[_o2]=(_p2>0)?_n2[_o2]:_U3;}}return this._i2;}_S3(_b4,_W3){if(_b4===this._a4&&_W3===this._P3)return;const _Y3=2*Math.PI*_b4/sampleRate;const alpha=Math.sin(_Y3)/(2*_W3);const _Z3=Math.cos(_Y3);const _74=1+alpha;const _F3=-2*_Z3;const _G3=1-alpha;const _H3=(1+_Z3)/2;const _I3=-1-_Z3;const _J3=(1+_Z3)/2;this._F3=_F3/_74;this._G3=_G3/_74;this._H3=_H3/_74;this._I3=_I3/_74;this._J3=_J3/_74;this._a4=_b4;
this._P3=_W3;}}registerProcessor("hpf2-processor",_84);class _c4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _E3=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_E3),minValue:10.0,maxValue:_E3},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}
constructor(_x2){super();this._h2();const _y2=_x2.outputChannelCount[0];this._F3=0;this._G3=0;this._H3=0;this._I3=0;this._J3=0;this._K3=new Float32Array(_y2);this._L3=new Float32Array(_y2);this._M3=new Float32Array(_y2);this._N3=new Float32Array(_y2);this._O3=-1;this._P3=-1;this._Q3=-1;}process(_l2,_m2,parameters){const input=_l2[0];const output=_m2[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _R3=(freq.length===1&&q.length===1&&gain.length===1);
if(_R3)this._S3(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _n2=input[c];const _t2=output[c];for(let _o2=0;_o2<_n2.length;++_o2){if(_R3===false){const _B2=(freq[_o2]!==undefined)?freq[_o2]:freq[0];const _T3=(q[_o2]!==undefined)?q[_o2]:q[0];const _u2=(gain[_o2]!==undefined)?gain[_o2]:gain[0];this._S3(_B2,_T3,_u2);}const _U3=this._H3*_n2[_o2]+this._I3*this._K3[c]+this._J3*this._L3[c]-this._F3*this._M3[c]-this._G3*this._N3[c];this._L3[c]=this._K3[c];this._K3[c]=_n2[_o2];this._N3[c]=this._M3[c];
this._M3[c]=_U3;const _p2=(bypass[_o2]!==undefined)?bypass[_o2]:bypass[0];_t2[_o2]=(_p2>0)?_n2[_o2]:_U3;}}return this._i2;}_S3(_V3,_W3,_X3){if(_V3===this._O3&&_W3===this._P3&&_X3===this._Q3)return;const _Y3=2*Math.PI*_V3/sampleRate;const _Z3=Math.cos(_Y3);const __3=Math.sqrt(_X3);const _04=__3+1;const _14=__3-1;const _24=_04*_Z3;const _34=_14*_Z3;const _44=_04-_34;const _54=_04+_34;const alpha=Math.sin(_Y3)/(2*_W3);const _64=(2*Math.sqrt(__3)*alpha);const _74=_54+_64;const _F3=-2*(_14+_24);const _G3=_54-_64;const _H3=__3*(_44+_64);
const _I3=2*__3*(_14-_24);const _J3=__3*(_44-_64);this._F3=_F3/_74;this._G3=_G3/_74;this._H3=_H3/_74;this._I3=_I3/_74;this._J3=_J3/_74;this._O3=_V3;this._P3=_W3;this._Q3=_X3;}}registerProcessor("lo-shelf-processor",_c4);class _d4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _94=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_94),minValue:10.0,maxValue:_94}
,{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_x2){super();this._h2();const _y2=_x2.outputChannelCount[0];this._F3=0;this._G3=0;this._H3=0;this._I3=0;this._J3=0;this._K3=new Float32Array(_y2);this._L3=new Float32Array(_y2);this._M3=new Float32Array(_y2);this._N3=new Float32Array(_y2);this._a4=-1;this._P3=-1;}process(_l2,_m2,parameters){const input=_l2[0];const output=_m2[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _R3=(cutoff.length===1&&q.length===1);
if(_R3)this._S3(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _n2=input[c];const _t2=output[c];for(let _o2=0;_o2<_n2.length;++_o2){if(_R3===false){const c=(cutoff[_o2]!==undefined)?cutoff[_o2]:cutoff[0];const _T3=(q[_o2]!==undefined)?q[_o2]:q[0];this._S3(c,_T3);}const _U3=this._H3*_n2[_o2]+this._I3*this._K3[c]+this._J3*this._L3[c]-this._F3*this._M3[c]-this._G3*this._N3[c];this._L3[c]=this._K3[c];this._K3[c]=_n2[_o2];this._N3[c]=this._M3[c];this._M3[c]=_U3;const _p2=(bypass[_o2]!==undefined)?bypass[_o2]:bypass[0];
_t2[_o2]=(_p2>0)?_n2[_o2]:_U3;}}return this._i2;}_S3(_b4,_W3){if(_b4===this._a4&&_W3===this._P3)return;const _Y3=2*Math.PI*_b4/sampleRate;const alpha=Math.sin(_Y3)/(2*_W3);const _Z3=Math.cos(_Y3);const _74=1+alpha;const _F3=-2*_Z3;const _G3=1-alpha;const _H3=(1-_Z3)/2;const _I3=1-_Z3;const _J3=(1-_Z3)/2;this._F3=_F3/_74;this._G3=_G3/_74;this._H3=_H3/_74;this._I3=_I3/_74;this._J3=_J3/_74;this._a4=_b4;this._P3=_W3;}}registerProcessor("lpf2-processor",_d4);class _e4 extends AudioWorkletProcessor{static get parameterDescriptors(){
const _E3=Math.min(sampleRate/2.0,20000.0);return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_E3),minValue:10.0,maxValue:_E3},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_x2){super();this._h2();const _y2=_x2.outputChannelCount[0];this._F3=0;this._G3=0;this._H3=0;this._I3=0;this._J3=0;
this._K3=new Float32Array(_y2);this._L3=new Float32Array(_y2);this._M3=new Float32Array(_y2);this._N3=new Float32Array(_y2);this._O3=-1;this._P3=-1;this._Q3=-1;}process(_l2,_m2,parameters){const input=_l2[0];const output=_m2[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _R3=(freq.length===1&&q.length===1&&gain.length===1);if(_R3)this._S3(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _n2=input[c];const _t2=output[c];for(let _o2=0;
_o2<_n2.length;++_o2){if(_R3===false){const _B2=(freq[_o2]!==undefined)?freq[_o2]:freq[0];const _T3=(q[_o2]!==undefined)?q[_o2]:q[0];const _u2=(gain[_o2]!==undefined)?gain[_o2]:gain[0];this._S3(_B2,_T3,_u2);}const _U3=this._H3*_n2[_o2]+this._I3*this._K3[c]+this._J3*this._L3[c]-this._F3*this._M3[c]-this._G3*this._N3[c];this._L3[c]=this._K3[c];this._K3[c]=_n2[_o2];this._N3[c]=this._M3[c];this._M3[c]=_U3;const _p2=(bypass[_o2]!==undefined)?bypass[_o2]:bypass[0];_t2[_o2]=(_p2>0)?_n2[_o2]:_U3;}}return this._i2;
}_S3(_V3,_W3,_X3){if(_V3===this._O3&&_W3===this._P3&&_X3===this._Q3)return;const _Y3=2*Math.PI*_V3/sampleRate;const _Z3=Math.cos(_Y3);const __3=Math.sqrt(_X3);const alpha=Math.sin(_Y3)/(2*_W3);const _f4=alpha/__3;const _g4=alpha*__3;const _74=1+_f4;const _F3=-2*_Z3;const _G3=1-_f4;const _H3=1+_g4;const _I3=_F3;const _J3=1-_g4;this._F3=_F3/_74;this._G3=_G3/_74;this._H3=_H3/_74;this._I3=_I3/_74;this._J3=_J3/_74;this._O3=_V3;this._P3=_W3;this._Q3=_X3;}}registerProcessor("peak-eq-processor",_e4);class _h4{constructor(_i4){
this._j4=0;this._k4=0;this.feedback=0;this._l4=0;this.buffer=new Float32Array(_i4);this._m4=0;}process(_q3){const out=this.buffer[this._m4];this._l4=(this._l4*this._j4)+(out*this._k4);this.buffer[this._m4]=_q3+(this._l4*this.feedback);++this._m4;this._m4%=this.buffer.length;return out;}_n4(_o4){this.feedback=Math.min(Math.max(0,_o4),1);}_p4(_q4){this._j4=Math.min(Math.max(0,_q4),1);this._k4=1-this._j4;}}class _r4{constructor(_i4){this.feedback=0;this.buffer=new Float32Array(_i4);this._m4=0;}process(_q3){
const out=this.buffer[this._m4];this.buffer[this._m4]=_q3+(out*this.feedback);++this._m4;this._m4%=this.buffer.length;return(out-_q3);}_n4(_o4){this.feedback=Math.min(Math.max(0,_o4),1);}}class _s4 extends AudioWorkletProcessor{static _t4=8;static _u4=4;static _v4=0.015;static _w4=0.4;static _x4=0.28;static _y4=0.7;static _z4=[1116,1188,1277,1356,1422,1491,1557,1617];static _A4=[1139,1211,1300,1379,1445,1514,1580,1640];static _B4=[556,441,341,225];static _C4=[579,464,364,248];static get parameterDescriptors(){return [{
name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_x2){super();this._h2();const _y2=_x2.outputChannelCount[0];this._D4=-1;this._E4=-1;this._F4=new Array(_y2);this._G4=new Array(_y2);const _H4=[_s4._z4,_s4._A4];const _I4=[_s4._B4,
_s4._C4];for(let c=0;c<_y2;++c){this._F4[c]=new Array(_s4._t4);this._G4[c]=new Array(_s4._u4);for(let i=0;i<_s4._t4;++i)this._F4[c][i]=new _h4(_H4[c%_H4.length][i]);for(let i=0;i<_s4._u4;++i)this._G4[c][i]=new _r4(_I4[c%_I4.length][i]);}this._J4(0.5);this._p4(0.5);for(let c=0;c<_y2;++c)for(let i=0;i<_s4._u4;++i)this._G4[c][i]._n4(0.5);}process(_l2,_m2,parameters){const input=_l2[0];const output=_m2[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;
for(let c=0;c<input.length;++c){const _n2=input[c];const _t2=output[c];for(let _o2=0;_o2<_n2.length;++_o2){const _o2=(size[_o2]!==undefined)?size[_o2]:size[0];const _K4=(damp[_o2]!==undefined)?damp[_o2]:damp[0];this._J4(_o2);this._p4(_K4);_t2[_o2]=_n2[_o2];let out=0;const _C2=_n2[_o2]*_s4._v4;for(let i=0;i<_s4._t4;++i)out+=this._F4[c][i].process(_C2);for(let i=0;i<_s4._u4;++i)out=this._G4[c][i].process(out);const _p2=(bypass[_o2]!==undefined)?bypass[_o2]:bypass[0];if(_p2>0.0){continue;}const _E2=(mix[_o2]!==undefined)?mix[_o2]:mix[0];
_t2[_o2]*=(1-_E2);_t2[_o2]+=(out*_E2);}}return this._i2;}_J4(_i4){if(_i4===this._D4)return;const size=(_i4*_s4._x4)+_s4._y4;for(let c=0;c<this._F4.length;++c)for(let i=0;i<_s4._t4;++i)this._F4[c][i]._n4(size);this._D4=_i4;}_p4(_q4){if(_q4===this._E4)return;const damp=_q4*_s4._w4;for(let c=0;c<this._F4.length;++c)for(let i=0;i<_s4._t4;++i)this._F4[c][i]._p4(damp);this._E4=_q4;}}registerProcessor("reverb1-processor",_s4);class _L4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",
automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_x2){super();this._h2();const _y2=_x2.outputChannelCount[0];this._M4=new Array(_y2).fill(1.0);this._N4=new Array(_y2).fill(0.0);
this._O4=new Array(_y2).fill(_P4._Q4._R4);this._S4=new Array(_y2);for(let c=0;c<_y2;++c){this._S4[c]=new _T4();this._S4[c]._U4(sampleRate);this._S4[c]._V4(this._M4[c]);this._S4[c]._W4(this._O4[c]);if(c%2===1){this._S4[c]._X4(this._N4[c]);}}}process(_l2,_m2,parameters){const input=_l2[0];const output=_m2[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _n2=input[c];
const _t2=output[c];for(let _o2=0;_o2<_n2.length;++_o2){_t2[_o2]=_n2[_o2];const _D2=(rate[_o2]!==undefined)?rate[_o2]:rate[0];const _Y4=(offset[_o2]!==undefined)?offset[_o2]:offset[0];const _Z4=(shape[_o2]!==undefined)?shape[_o2]:shape[0];this.__4(c,_D2,_Y4,_Z4);const _05=this._S4[c]._i3();const _p2=(bypass[_o2]!==undefined)?bypass[_o2]:bypass[0];if(_p2>0.0){continue;}const i=(intensity[_o2]!==undefined)?intensity[_o2]:intensity[0];const out=_n2[_o2]*_05*i;_t2[_o2]*=(1.0-i);_t2[_o2]+=out;}}return this._i2;
}__4(_k3,_15,_25,_35){if(_15!==this._M4[_k3]){this._S4[_k3]._V4(_15);this._M4[_k3]=_15;}if(_25!==this._N4[_k3]){if(_k3%2===1){this._S4[_k3]._X4(_25);}this._N4[_k3]=_25;}if(_35!==this._O4[_k3]){this._S4[_k3]._W4(_35);this._O4[_k3]=_35;}}}registerProcessor("tremolo-processor",_L4);function _P4(){}_P4._Q4={_R4:0,_45:1,_55:2,_65:3,_75:4,_85:5};_P4._95=function(_a5){return 1.0-_a5;};_P4._b5=function(_a5){return _a5;};_P4._c5=function(_a5){return 0.5*(Math.sin((_a5*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_P4._d5=function(_a5){
if(_a5<0.5){return 0.0;}return 1.0;};_P4._e5=function(_a5){if(_a5<0.5){return 2.0*_a5;}return 2.0-(2.0*_a5);};_P4._f5=[_P4._95,_P4._b5,_P4._c5,_P4._d5,_P4._e5];_g5._h5=512;_g5._i5=1.0/_g5._h5;function _g5(_j5){this.data=new Float32Array(_g5._h5);for(let i=0;i<_g5._h5;++i){this.data[i]=_j5(i*_g5._i5);}}_g5.prototype._i3=function(_a5){_a5=Math.max(0.0,_a5);_a5=Math.min(_a5,1.0);const _k5=_a5*_g5._h5;const _l5=~~_k5;const _m5=_k5-_l5;let _m3=_l5;let _n3=_m3+1;if(_m3>=_g5._h5){_m3-=_g5._h5;}if(_n3>=_g5._h5){_n3-=_g5._h5;
}const _o3=this.data[_m3];const _p3=this.data[_n3];return _o3+(_p3-_o3)*_m5;};_T4._n5=[];_T4._o5=false;_T4._p5=0.0;_T4._E3=20.0;function _T4(){this._q5=48000;this.shape=_P4._Q4._55;this.freq=1.0;this._r5=0.0;this._i5=0.0;this._s5=0.0;if(_T4._o5==true){return;}for(let i=0;i<_P4._Q4._85;++i){_T4._n5[i]=new _g5(_P4._f5[i]);}_T4._o5=true;}_T4._t5=function(){return(_T4._o5==true);};_T4.prototype._U4=function(_u5){this._q5=_u5;this._v5();};_T4.prototype._V4=function(_V3){_V3=Math.max(_T4._p5,_V3);_V3=Math.min(_V3,
_T4._E3);this.freq=_V3;this._v5();};_T4.prototype._X4=function(_25){_25=Math.max(0.0,_25);_25=Math.min(_25,1.0);const _w5=_25-this._s5;this._s5=_25;this._r5+=_w5;while(this._r5>=1.0){this._r5-=1.0;}while(this._r5<0.0){this._r5+=1.0;}};_T4.prototype._W4=function(_35){_35=Math.max(0,_35);_35=Math.min(_35,_P4._Q4._85-1);this.shape=_35;};_T4.prototype._i3=function(){const result=_T4._n5[this.shape]._i3(this._r5);this._r5+=this._i5;while(this._r5>=1.0){this._r5-=1.0;}return result;};_T4.prototype._v5=function(){
this._i5=this.freq/this._q5;};